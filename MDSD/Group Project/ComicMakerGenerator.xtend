/*
 * generated by Xtext 2.13.0
 */
package org.xtext.jdv14.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.jdv14.comicMaker.Comic

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class ComicMakerGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val mc = resource.allContents.filter(Comic).next
		fsa.generateFile("Comic.html", mc.generateHTML)
		fsa.generateFile("Comic.css", mc.generateCSS)
	}
	
	def CharSequence generateHTML(Comic com){
		'''
		<!DOCTYPE html>
		<html>
		<head>
		<title>My comic</title>
		<link rel="stylesheet" type="text/css" href="./comic.css">
		</head>
		<body>
		<!--Generate div for each panel-->
			«FOR panel:com.panelList.panels»
			<div id="«panel.name»">
				«FOR c:panel.clist.characters»
				<img class="«c.name»">
				«IF c.speech !== null»
				<p class="speech-bubble «c.name»-speech «switch c.speech.pos {
					case 'top': 'top'
					case 'left': 'left'
					case 'right': 'right'
					default: ''
				}»">«c.speech.speech»</p>
				«ENDIF»
				«ENDFOR»
			</div>
			«ENDFOR»
		</body>
		</html>
		'''
	}
	
	def CharSequence generateCSS(Comic com){
		'''
		«generateHTMLAndBodyStyle()»
		«generateCommonSpeechBubbleStyle()»
		«com.generateCommonPanelStyle»
		«com.generateIndividualPanelStyle»
		«com.generateCharacterStyles»
		'''
	}
	
	def CharSequence generateHTMLAndBodyStyle(){
		'''
		html, body { 
		    height: 100vh; 
		    width: 100vw; 
		    padding: 0; 
		    margin: 0; 
		    overflow-x: hidden;
		    display: flex;
		    justify-content: space-evenly;
		}
		'''
	}
	
	def CharSequence generateCommonSpeechBubbleStyle(){
		'''
		.speech-bubble {
		    position: absolute;
		    word-wrap: break-word;
		    padding: 5px;
		    border: 3px solid black;
		    background: #fff;
		    -webkit-border-radius: 10px;
		    -moz-border-radius: 10px;
		    border-radius: 10px;
		    max-height: 100px;
		    width: 100px;
		}
		
		
		.speech-bubble::before {
		    content: "";
		    position: absolute;
		    bottom: -20px;
		    left: 40px;
		    border-width: 20px 20px 0;
		    border-style: solid;
		    border-color: black transparent;
		    display: block;
		    width: 0;
		}
		
		.speech-bubble::after{
		    content: "";
		    position: absolute;
		    bottom: -13px;
		    left: 47px;
		    border-width: 13px 13px 0;
		    border-style: solid;
		    border-color: #fff transparent;
		    display: block;
		    width: 0;
		}
		
		.speech-bubble.top::after{
		    top: -13px;
		    bottom: auto;
		    left: auto;
		    right: 47px;
		    border-width: 0 13px 13px;
		}
		.speech-bubble.top::before{
		    top: -20px;
		    bottom: auto;
		    left: auto;
		    right: 40px;
		    border-width: 0 20px 20px;
		}
		
		.speech-bubble.left::after{
		    top: 5px;
		    bottom: auto;
		    left: -21px;
		    border-width: 9px 21px 9px 0;
		    border-color: transparent #fff;
		}
		.speech-bubble.left::before{
			top: -1px;
		    bottom: auto;
		    left: -30px;
		    border-width: 15px 30px 15px 0;
		    border-color: transparent black;
		}
		
		.speech-bubble.right::after{
			top: 5px;
			bottom: auto;
			left: auto;
			right: -21px;
			border-width: 9px 0 9px 21px;
			border-color: transparent #fff;
		}
			
		.speech-bubble.right::before{
		    top: -1px;
		    bottom: auto;
		    left: auto;
		    right: -30px;
		    border-width: 15px 0 15px 30px;
		    border-color: transparent black;
		}
		'''
	}
	
	def CharSequence generateCommonPanelStyle(Comic com){
		'''
		/*Set the common style of all panels*/
		«FOR panel:com.panelList.panels SEPARATOR ", "»
		#«panel.name»
		«ENDFOR»
		{
		border: 1px solid black;
		width: 49%; height: 50%;
		display: inline-block;
		overflow: hidden;
		position: relative;
		}
		'''
	}
	
	def CharSequence generateIndividualPanelStyle(Comic com){
		'''
		/*Set the individual style for each panel*/
		«FOR panel:com.panelList.panels SEPARATOR "\n"»
		#«panel.name» {
			«IF panel !== null»
			background: «panel.background.color»
			«ENDIF»
		}
		«ENDFOR»
		'''
	}
	
	def CharSequence generateCharacterStyles(Comic com){
		'''
		«FOR panel:com.panelList.panels SEPARATOR "\n"»
			«FOR c:panel.clist.characters SEPARATOR "\n"»
				#«panel.name» .«c.name» {
					position: absolute;
					«switch c.size {
						case 'extra-small': 'width: 75px;\nheight: 75px;'
						case 'small': 'width: 175px;\nheight: 175px;'
						case 'medium': 'width: 275px;\nheight: 275px;'
						case 'large': 'width: 375px;\nheight: 375px;'
						case 'extra-large': 'width: 475px;\nheight: 475px;'
						default: 'width: 275px;\nheight: 275px;'
					}»
					left: «c.pos.x»%;
					bottom: «c.pos.y»%;
					content: url("«c.figure»");
				}
				«c.generateSpeechBubblePosition»
				«ENDFOR»
			«ENDFOR»	
		'''
	}
	
	def CharSequence generateSpeechBubblePosition(org.xtext.jdv14.comicMaker.Character c){
		'''
		.«c.name»-speech {
				«switch c.size {
					case 'extra-small': '''left: calc(«c.pos.x»% + (75px/4));
bottom: calc(«c.pos.y»% + (75px));'''
					case 'small': '''left: calc(«c.pos.x»% + (175px/4));
bottom: calc(«c.pos.y»% + (175px));'''
					case 'medium': '''left: calc(«c.pos.x»% + (275px/4));
bottom: calc(«c.pos.y»% + (275px));'''
					case 'large': '''left: calc(«c.pos.x»% + (375px/4));
bottom: calc(«c.pos.y»% + (375px));'''
					case 'extra-large': '''left: calc(«c.pos.x»% + (475px/4));
bottom: calc(«c.pos.y»% + (475px));'''
					default: '''left: calc(«c.pos.x»% + (275px/4));
bottom: calc(«c.pos.y»% + (275px));'''
				}»	
		}
		'''
	}
}
